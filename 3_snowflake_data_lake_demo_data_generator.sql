-- 
-- default database should be STG, STAGE or STAGING
--
USE DATABASE STG;

/********************************************************************
 ** Populate dummy demo data manually
 ********************************************************************/--
-- execute context
--
USE SCHEMA _METADATA;

/*
USE INT;
CREATE SCHEMA IF NOT EXISTS REFERENCE;
MERGE INTO REFERENCE.TILE_SCORE D
USING (
    --CREATE OR REPLACE TABLE REFERENCE.TILE_SCORE AS
    SELECT $1::VARCHAR TITLE,
        $2::FLOAT SCORE
    FROM VALUES 
      ('C-level', 20),
      ('VP', 15),
      ('Director', 10),
      ('Manager', 5)
) S
ON D.TITLE = S.TITLE
WHEN NOT MATCHED THEN INSERT(TITLE, SCORE) VALUES(S.TITLE, S.SCORE)
WHEN MATCHED THEN UPDATE SET SCORE = S.SCORE;

MERGE INTO REFERENCE.PLATFORM D
USING (
    --CREATE OR REPLACE TABLE REFERENCE.PLATFORM AS
    SELECT $1::NUMBER PLATFORM_ID,
        $2::VARCHAR PLATFORM_NAME ,
        $3::VARCHAR PLATFORM_TYPE
    FROM VALUES 
      (1, 'IH_EMAIL_GOWS', 'GOWS'),
      (2, 'SFDC_EMAIL_MSTM', 'MSTM')
) S
ON D.PLATFORM_NAME = S.PLATFORM_NAME
AND D.PLATFORM_TYPE = S.PLATFORM_TYPE
WHEN NOT MATCHED THEN 
    INSERT(PLATFORM_ID, PLATFORM_NAME, PLATFORM_TYPE) 
    VALUES(S.PLATFORM_ID, S.PLATFORM_NAME, S.PLATFORM_TYPE)
WHEN MATCHED THEN 
    UPDATE SET 
        PLATFORM_ID = S.PLATFORM_ID,
        PLATFORM_NAME = S.PLATFORM_NAME,
        PLATFORM_TYPE = S.PLATFORM_TYPE;

MERGE INTO REFERENCE.COMPANY D
USING (
    --CREATE OR REPLACE TABLE REFERENCE.COMPANY AS
    SELECT $1::NUMBER COMPANY_ID,
        $2::VARCHAR COMPANY_NAME,
        $3::VARCHAR SHORT_NAME
    FROM VALUES 
      (1, 'INTROHIVE', 'IH'),
      (2, 'SALESFORCE', 'SFDC')
) S
ON D.COMPANY_NAME = S.COMPANY_NAME
WHEN NOT MATCHED THEN 
    INSERT(COMPANY_ID, COMPANY_NAME, SHORT_NAME) 
    VALUES(S.COMPANY_ID, S.COMPANY_NAME, S.SHORT_NAME)
WHEN MATCHED THEN 
    UPDATE SET 
        COMPANY_ID = S.COMPANY_ID,
        COMPANY_NAME = S.COMPANY_NAME,
        SHORT_NAME = S.SHORT_NAME;
*/
;

INSERT INTO STG.IH_EMAIL_GOWS.RAW_PERSON
SELECT FIRST_NAME, 
    LAST_NAME, 
    ARRAY_CONSTRUCT('C-level','VP','Director','Manager','Employee')[UNIFORM(0, 4, RANDOM(11))::NUMBER] TITLE, 
    'IH' COMPANY, 
    ARRAY_CONSTRUCT('Sales','Product','Engineering','HR','IT')[UNIFORM(0, 4, RANDOM(11))::NUMBER] DEPARTMENT,
    ARRAY_AGG(EMAIL_ADDRESS) EMAIL_ADDRESS,
    NULL PHOTO_URL,
    '' DB_ACTION,
    MIN(FILE_NAME) FILE_NAME,
    MIN(FILE_ROW_NUMBER) FILE_ROW_NUMBER,
    DATEADD(MINUTE, -UNIFORM(1, 50000, RANDOM(1)), CURRENT_TIMESTAMP(0))::TIMESTAMP_NTZ LOAD_TIME
FROM (
    SELECT 
        UPPER(RANDSTR(UNIFORM(3, 3, RANDOM()), RANDOM())::VARCHAR) FIRST_NAME,
        UPPER(RANDSTR(UNIFORM(3, 3, RANDOM()), RANDOM())::VARCHAR) LAST_NAME,
        LOWER(CONCAT(FIRST_NAME, ' ', LAST_NAME, ' <', FIRST_NAME, '.', LAST_NAME, '@IH.COM>')) EMAIL_ADDRESS,
        UPPER(RANDSTR(UNIFORM(3, 3, RANDOM()), RANDOM())::VARCHAR) FILE_NAME,
        UNIFORM(0, 15, RANDOM(11))::NUMBER FILE_ROW_NUMBER
    FROM TABLE(GENERATOR(ROWCOUNT => 50)) V
    )
GROUP BY 1,2
ORDER BY 1,2
;

INSERT INTO STG.SFDC_EMAIL_MSTM.RAW_PERSON
SELECT FIRST_NAME, 
    LAST_NAME, 
    ARRAY_CONSTRUCT('C-level','VP','Director','Manager','Employee')[UNIFORM(0, 4, RANDOM(11))::NUMBER] TITLE, 
    'SFDC' COMPANY, 
    ARRAY_CONSTRUCT('Sales','Product','Engineering','HR','IT')[UNIFORM(0, 4, RANDOM(11))::NUMBER] DEPARTMENT,
    ARRAY_AGG(EMAIL_ADDRESS) EMAIL_ADDRESS,
    NULL PHOTO_URL,
    '' DB_ACTION,
    MIN(FILE_NAME) FILE_NAME,
    MIN(FILE_ROW_NUMBER) FILE_ROW_NUMBER,
    DATEADD(MINUTE, -UNIFORM(1, 50000, RANDOM(1)), CURRENT_TIMESTAMP(0))::TIMESTAMP_NTZ LOAD_TIME
FROM (
    SELECT 
        UPPER(RANDSTR(UNIFORM(3, 3, RANDOM()), RANDOM())::VARCHAR) FIRST_NAME,
        UPPER(RANDSTR(UNIFORM(3, 3, RANDOM()), RANDOM())::VARCHAR) LAST_NAME,
        LOWER(CONCAT(FIRST_NAME, ' ', LAST_NAME, ' <', FIRST_NAME, '.', LAST_NAME, '@SFDC.COM>')) EMAIL_ADDRESS,
        UPPER(RANDSTR(UNIFORM(3, 3, RANDOM()), RANDOM())::VARCHAR) FILE_NAME,
        UNIFORM(0, 15, RANDOM(11))::NUMBER FILE_ROW_NUMBER
    FROM TABLE(GENERATOR(ROWCOUNT => 50)) V
    )
GROUP BY 1,2
ORDER BY 1,2
;

INSERT INTO STG.IH_EMAIL_GOWS.RAW_MESSAGE
SELECT M.SUBJECT, 
    ARRAY_AGG(S.EMAIL_ADDRESS[0])[0] SENDER, 
    ARRAY_SLICE(
          ARRAY_AGG(A.EMAIL_ADDRESS[0]),
          UNIFORM(1, 3, RANDOM(11))::NUMBER, 
          UNIFORM(3, 10, RANDOM(11))::NUMBER
        ) AUDIENCE,
    M.BODY,
    NULL REFERENCES,
    DATEADD(MINUTE, -UNIFORM(1, 50000, RANDOM(1)), CURRENT_TIMESTAMP(0))::TIMESTAMP_NTZ SENT_AT,
    NULL PROBABLY_REPLY,
    NULL AUTO_RESPONSE_TYPE,
    NULL IN_REPLY_TO,
    NULL ORIGINAL_ID,
    NULL THREAD_ID,
    '' DB_ACTION,
    M.FILE_NAME,
    M.FILE_ROW_NUMBER,
    DATEADD(MINUTE, -UNIFORM(1, 50000, RANDOM(1)), CURRENT_TIMESTAMP(0))::TIMESTAMP_NTZ LOAD_TIME
FROM (
    SELECT SUBJECT, 
        --SENDER, 
        --ARRAY_AGG(EMAIL_ADDRESS) AUDIENCE,
        BODY,
        '' DB_ACTION,
        MIN(FILE_NAME) FILE_NAME,
        MIN(FILE_ROW_NUMBER) FILE_ROW_NUMBER,
        DATEADD(MINUTE, -UNIFORM(1, 50000, RANDOM(1)), CURRENT_TIMESTAMP(0))::TIMESTAMP_NTZ LOAD_TIME
    FROM (
        SELECT 
            UPPER(RANDSTR(UNIFORM(3, 3, RANDOM()), RANDOM())::VARCHAR) SUBJECT,
            LOWER(RANDSTR(UNIFORM(10, 30, RANDOM()), RANDOM())::VARCHAR) BODY,
            UPPER(RANDSTR(UNIFORM(3, 3, RANDOM()), RANDOM())::VARCHAR) FILE_NAME,
            UNIFORM(0, 15, RANDOM(11))::NUMBER FILE_ROW_NUMBER
        FROM TABLE(GENERATOR(ROWCOUNT => 100)) V
        )
    GROUP BY 1,2
) M
JOIN STG.IH_EMAIL_GOWS.RAW_PERSON S
ON M.FILE_ROW_NUMBER = S.FILE_ROW_NUMBER
LEFT JOIN STG.IH_EMAIL_GOWS.RAW_PERSON A
ON NOT ARRAY_CONTAINS(S.EMAIL_ADDRESS, A.EMAIL_ADDRESS)
GROUP BY 1,4,13,14
;

INSERT INTO STG.SFDC_EMAIL_MSTM.RAW_MESSAGE
SELECT M.SUBJECT, 
    ARRAY_AGG(S.EMAIL_ADDRESS[0])[0] SENDER, 
    ARRAY_SLICE(
          ARRAY_AGG(A.EMAIL_ADDRESS[0]),
          UNIFORM(1, 3, RANDOM(11))::NUMBER, 
          UNIFORM(3, 10, RANDOM(11))::NUMBER
        ) AUDIENCE,
    M.BODY,
    NULL REFERENCES,
    DATEADD(MINUTE, -UNIFORM(1, 50000, RANDOM(1)), CURRENT_TIMESTAMP(0))::TIMESTAMP_NTZ SENT_AT,
    NULL PROBABLY_REPLY,
    NULL AUTO_RESPONSE_TYPE,
    NULL IN_REPLY_TO,
    NULL ORIGINAL_ID,
    NULL THREAD_ID,
    '' DB_ACTION,
    M.FILE_NAME,
    M.FILE_ROW_NUMBER,
    DATEADD(MINUTE, -UNIFORM(1, 50000, RANDOM(1)), CURRENT_TIMESTAMP(0))::TIMESTAMP_NTZ LOAD_TIME
FROM (
    SELECT SUBJECT, 
        --SENDER, 
        --ARRAY_AGG(EMAIL_ADDRESS) AUDIENCE,
        BODY,
        '' DB_ACTION,
        MIN(FILE_NAME) FILE_NAME,
        MIN(FILE_ROW_NUMBER) FILE_ROW_NUMBER,
        DATEADD(MINUTE, -UNIFORM(1, 50000, RANDOM(1)), CURRENT_TIMESTAMP(0))::TIMESTAMP_NTZ LOAD_TIME
    FROM (
        SELECT 
            UPPER(RANDSTR(UNIFORM(3, 3, RANDOM()), RANDOM())::VARCHAR) SUBJECT,
            LOWER(RANDSTR(UNIFORM(10, 30, RANDOM()), RANDOM())::VARCHAR) BODY,
            UPPER(RANDSTR(UNIFORM(3, 3, RANDOM()), RANDOM())::VARCHAR) FILE_NAME,
            UNIFORM(0, 15, RANDOM(11))::NUMBER FILE_ROW_NUMBER
        FROM TABLE(GENERATOR(ROWCOUNT => 100)) V
        )
    GROUP BY 1,2
) M
JOIN STG.SFDC_EMAIL_MSTM.RAW_PERSON S
ON M.FILE_ROW_NUMBER = S.FILE_ROW_NUMBER
LEFT JOIN STG.SFDC_EMAIL_MSTM.RAW_PERSON A
ON NOT ARRAY_CONTAINS(S.EMAIL_ADDRESS, A.EMAIL_ADDRESS)
GROUP BY 1,4,13,14
;

/*
--
-- Check how the stage data are flowing into raw tables
--
USE ROLE TRANSFORMER;
USE DATABASE STG;
USE SCHEMA _METADATA;
CALL CTRL_TASK_SCHEDULER('DATA_LOADER','WORK');

-- Check the raw data
SELECT * FROM IH_EMAIL_GOWS.RAW_PERSON;
SELECT * FROM IH_EMAIL_GOWS.RAW_MESSAGE;
SELECT * FROM IH_EMAIL_GOWS.RAW_DATA3;

SELECT * FROM SFDC_EMAIL_MSTM.RAW_PERSON;
SELECT * FROM STG.SFDC_EMAIL_MSTM.RAW_MESSAGE;

-- Check the loaded stage data
SELECT * FROM IH_EMAIL_GOWS.PERSON;
SELECT * FROM IH_EMAIL_GOWS.MESSAGE;
SELECT * FROM IH_EMAIL_GOWS.DATA3;

SELECT * FROM SFDC_EMAIL_MSTM.PERSON;
SELECT * FROM SFDC_EMAIL_MSTM.MESSAGE;


--
-- Check how the raw data are merged in
--
CALL CTRL_TASK_SCHEDULER('DATA_VERSION','WORK');

-- Check the digested data
SELECT * FROM IH_EMAIL_GOWS.DIGEST_PERSON;
SELECT * FROM IH_EMAIL_GOWS.DIGEST_MESSAGE;
SELECT * FROM STG.IH_EMAIL_GOWS.DIGEST_DATA3;

SELECT * FROM SFDC_EMAIL_MSTM.DIGEST_PERSON;
SELECT * FROM STG.SFDC_EMAIL_MSTM.DIGEST_MESSAGE;

-- Check the cross reference data
SELECT * FROM IH_EMAIL_GOWS.XREF_PERSON;
SELECT * FROM IH_EMAIL_GOWS.XREF_MESSAGE;
SELECT * FROM IH_EMAIL_GOWS.XREF_DATA3;

SELECT * FROM SFDC_EMAIL_MSTM.XREF_PERSON;
SELECT * FROM SFDC_EMAIL_MSTM.XREF_MESSAGE;


--
-- Check how the data load into INT database
--
USE ROLE TRANSFORMER;
USE DATABASE INT;
USE SCHEMA _METADATA;
CALL CTRL_TASK_SCHEDULER('DATA_LOADER','DEBUG');
CALL CTRL_TASK_SCHEDULER('DATA_LOADER','WORK');

-- Check the digested data
SELECT * FROM IH_EMAIL_GOWS.DIGEST_PERSON;
SELECT * FROM IH_EMAIL_GOWS.DIGEST_MESSAGE;
SELECT * FROM IH_EMAIL_GOWS.DIGEST_PERSON_EMAIL;
SELECT * FROM IH_EMAIL_GOWS.DIGEST_MESSAGE_EMAIL;

SELECT * FROM SFDC_EMAIL_MSTM.DIGEST_PERSON;
SELECT * FROM SFDC_EMAIL_MSTM.DIGEST_MESSAGE;
SELECT * FROM SFDC_EMAIL_MSTM.DIGEST_PERSON_EMAIL;
SELECT * FROM SFDC_EMAIL_MSTM.DIGEST_MESSAGE_EMAIL;

-- Check the cross reference data
CALL CTRL_TASK_SCHEDULER('DATA_VERSION','WORK');

SELECT * FROM IH_EMAIL_GOWS.XREF_PERSON;
SELECT * FROM IH_EMAIL_GOWS.XREF_MESSAGE;
SELECT * FROM IH_EMAIL_GOWS.XREF_PERSON_EMAIL;
SELECT * FROM IH_EMAIL_GOWS.XREF_MESSAGE_EMAIL;

SELECT * FROM SFDC_EMAIL_MSTM.XREF_PERSON;
SELECT * FROM SFDC_EMAIL_MSTM.XREF_MESSAGE;
SELECT * FROM SFDC_EMAIL_MSTM.XREF_PERSON_EMAIL;
SELECT * FROM SFDC_EMAIL_MSTM.XREF_MESSAGE_EMAIL;
*/


/********************************************************************
 ** Process dummy demo data manually
 ********************************************************************/--
USE SCHEMA STG._METADATA;

--CALL CTRL_TASK_SCHEDULER('DATA_LOADER','DEBUG');
CALL CTRL_TASK_SCHEDULER('DATA_LOADER','WORK');
